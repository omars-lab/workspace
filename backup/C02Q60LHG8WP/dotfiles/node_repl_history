exit
getUpToLastXElementsFromList([ 7, 8, 9 ], 1)
}
    return list.slice(list.length - x, list.length);
function getUpToLastXElementsFromList(list, x) {
}
    return list.slice(list.length - x, list.length);
function getUpToLastXElementsFromList(list, x) {
getLastXElementsFromList([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 3)
getLastXElementsFromList([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 10)
getLastXElementsFromList([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 2)
getLastXElementsFromList([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ], 1)
getLastXElementsFromList
}
    return list.slice(list.length - x, list.length);
function getLastXElementsFromList(list, x) {
    logger.log(level, msg);
function logMsg(level, msg) {
[0,1,2,3,4,5,6,7,8,9].slice(-123423,10)
[0,1,2,3,4,5,6,7,8,9].slice(-123,10)
[0,1,2,3,4,5,6,7,8,9].slice(1,10)
[0,1,2,3,4,5,6,7,8,9].slice(10-5,10)
[0,1,2,3,4,5,6,7,8,9].slice(5,10)
[0,1,2,3,4,5,6,7,8,9].slice(5,9)
[0,1,2,3,4,5,6,7,8,9].slice(5,10)
[1,2,3,4,5,6,7,8,9].slice(5,10)
exit
eixt
x.slice(x.length - 3, x.length - 1)
x.slice(x.length - 3, x.length)
x
x = [0,1,2,3,4,5];
var x = [0,1,2,3,4,5];
var x = [0,1,2,3,4,5]
[0,1,2,3,4,5].slice(1,6)
[0,1,2,3,4,5].slice(1,5)
exit()
exit
delete b.a
a
delete a.a
a
delete a.b
a = {a: 1}
exit
if(! ('false' === "true") ) {console.log("hi")};
if(! 'false' === "true") {console.log("hi")};
if('false' !=== "true") {console.log("hi")};
if('false' === "true") {console.log("hi")};
if('false') {console.log("hi")};
sys.exit()
sys.exit
exit()
exit
[].concat("hi")
exit
exit()
exit
parseFloat("nus")
parseInt("nus")
parseInt("null")
parseInt("none")
parseInt("")
exit()
exit
parseInt('12')
parsesInt('12')
"s" || 12
"" || 12
"" or 12
exit
True
true
m(new Date('2015/10/09')).format("YYYY-MM-DD")
m(new Date('2015/10/09')).format("DD")
m(new Date('2015/10/09')).format("MM")
m(new Date('2015/10/09')).format("YYYY")
m(new Date('2015/10/09')).format(YYYY")
m(new Date('2015/10/09')).format("DD")
m(new Date('2015/10/09'))
new Date('2015/10/09')
new Date('2015/10/11')
new Date('2015.10/11')
new Date('20151011')
m("20151109", "YYYYMMDD").format("DD")
m("20151110", "YYYYMMDD").format("DD")
m("20151110", "YYYYMMDD")
m()
m
moment().format('dddd'
m()
var m = require("moment");
exit()
Math.pow(10, (2).toFixed(0).toString().length) * Math.pow(10, 3)
Math.pow(10, (2).toFixed(0).toString().length)
(2).toFixed(0).toString().length
(2).toFixed(0).toString().length()
(2).toFixed(0).toString()
String.valueOf(2)
String.valueOf(1)(2)
String.valueOf(1)()
String.valueOf(1)
String.valueOf
String.valueOf)
String.valueOf((2).toFixed(0))
String
Integer
Integerl
Int
Integer.toString()
Integer.toString(2)
Integer.toString((2).toFixed(0))
(2).toFixed(0)
(2).toFixed(2)
(2).tofixed(2)
100 / 100000
100 / 1000
2 / 1000
2
n(2).format("[0]0.")
n(2).format("[0]0")
n(2).format("[0]")
n(2).format("0%")
n(2)
n(1)
n.numeral
n.format
n
var n = require('numeraljs');
var n = require('numeraljs');'
q
2.0.
Int
2
2.0.toFixed(2);
2.toFixed(2);
exit()
l.range(1, 43).map(function(num){return "img/sara/post" + num + ".jpg";})
l.range(1, 43)).map(function(num){return "img/sara/post" + num + ".jpg";})
l.range(1,30).map(function(num){return "post" + num + "";})
l.chain().range(1,30)
l.chain()
l
var l = require('lodash');
_
var _ = require('lodash');
exit
parseInt("100") * 4
exit
x.union([{a:1}], [{a:1}])
x.union([{a:1}], [{a:2}])
var x = require('lodash')
a(1,2,3)
}
 b('4', '5');
}
  console.log(arguments);
  function b(four, five){
function a(one, two, three){
exit
[x.name].concat([1,2,3])
[x.name] + [1,2,3]
x.name
}
function x(){
}
function x(){
x(_,2,3)(1,4)
var x = l.curry(function(a,b,c,d){return ("" + a + b + c + d);});
x(_,2,3)(1,4)
var x = l.curry(function(a,b,c,d){return (a + b + c + d);});
var x = l.curry(function(a,b,c,d){return (1*a + 10*b + 100*c + 1000*d);});
x(_,2,3)(1,4)
var x = l.curry(function(a,b,c,d){return (1*a + 10*b + 100*c+1000*d);});
x(_,2,3)(1,4)
x
var x = l.curry(function(a,b,c,d){return 1*a + 10*b + 100*c+1000*d});
var x = l.curry(function(a,b,c,d));
var l = require('lodash');
var x = new Quandl();
var Quandl = require("quandl");
    })
          api_version: 3
          auth_token: config.quandl.auth,
new Quandl({
    callback(null, "Success");
con.chain()
con.chain
con.find()
con.find
con.getCollection('companies')
con
var con = m.connect("mongodb://192.168.99.100:27017/barclays-jarvis");
;
m..connect("mongodb://192.168.99.100:27017/barclays-jarvis")
var m = require('mongodb');
l.merge({a:1}, { "tickers": { "quandl": [] } })
l.merge({a:1}, {b:2})
var l = require('lodash');
x
var x = {a:1}._doc;
x
var x = {}._doc;
var x = {}.toObject();
var x = v{}.toObject();
{}.toObject();
;
{}.toObject()
{}.toObject(0
 console.log(result, n);
l.transform([2, 3, 4], function(result, n) {
});
  return n % 2 == 0;
  result.push(n *= n);
l.transform([2, 3, 4], function(result, n) {
  return n % 2 == 0;
  result.push(n *= n);
_.transform([2, 3, 4], function(result, n) {
});
  return n % 2 == 0;
  result.push(n *= n);
_.transform([2, 3, 4], function(result, n) {
});
  return n % 2 == 0;
  result.push(n *= n);
l_.transform([2, 3, 4], function(result, n) {
var l = require('lodash');
Checks if path is a direct property.
# Ⓢ Ⓝ
_.has(object, path)
// → 'default'
_.get(object, 'a.b.c', 'default');
// → 3
_.get(object, ['a', '0', 'b', 'c']);
// → 3
_.get(object, 'a[0].b.c');
var object = { 'a': [{ 'b': { 'c': 3 } }] };
Example
(*): Returns the resolved value.
Returns
[defaultValue] (*): The value returned if the resolved value is undefined.
path (Array|string): The path of the property to get.
object (Object): The object to query.
Arguments
Gets the property value at path of object. If the resolved value is undefined the defaultValue is used in its place.
# Ⓢ Ⓝ
_.get(object, path, [defaultValue])
// → ['after', 'ary', 'assign', …]
_.functions(_);
Example
(Array): Returns the new array of property names.
Returns
object (Object): The object to inspect.
Arguments
_.methods
Aliases
Creates an array of function property names from all enumerable properties, own and inherited, of object.
# Ⓢ Ⓝ
_.functions(object)
// → logs 'b' and 'a' assuming `_.forOwn` logs 'a' and 'b'
});
  console.log(key);
_.forOwnRight(new Foo, function(value, key) {
Foo.prototype.c = 3;
}
  this.b = 2;
  this.a = 1;
function Foo() {
Example
(Object): Returns object.
Returns
[thisArg] (*): The this binding of iteratee.
[iteratee=_.identity] (Function): The function invoked per iteration.
object (Object): The object to iterate over.
Arguments
This method is like _.forOwn except that it iterates over properties of object in the opposite order.
# Ⓢ Ⓝ
_.forOwnRight(object, [iteratee=_.identity], [thisArg])
// → logs 'a' and 'b' (iteration order is not guaranteed)
});
  console.log(key);
_.forOwn(new Foo, function(value, key) {
Foo.prototype.c = 3;
}
  this.b = 2;
  this.a = 1;
function Foo() {
Example
(Object): Returns object.
Returns
[thisArg] (*): The this binding of iteratee.
[iteratee=_.identity] (Function): The function invoked per iteration.
object (Object): The object to iterate over.
Arguments
Iterates over own enumerable properties of an object invoking iteratee for each property. The iteratee is bound to thisArg and invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.
# Ⓢ Ⓝ
_.forOwn(object, [iteratee=_.identity], [thisArg])
// → logs 'c', 'b', and 'a' assuming `_.forIn ` logs 'a', 'b', and 'c'
});
  console.log(key);
_.forInRight(new Foo, function(value, key) {
Foo.prototype.c = 3;
}
  this.b = 2;
  this.a = 1;
function Foo() {
Example
(Object): Returns object.
Returns
[thisArg] (*): The this binding of iteratee.
[iteratee=_.identity] (Function): The function invoked per iteration.
object (Object): The object to iterate over.
Arguments
This method is like _.forIn except that it iterates over properties of object in the opposite order.
# Ⓢ Ⓝ
_.forInRight(object, [iteratee=_.identity], [thisArg])
// → logs 'a', 'b', and 'c' (iteration order is not guaranteed)
});
  console.log(key);
_.forIn(new Foo, function(value, key) {
Foo.prototype.c = 3;
}
  this.b = 2;
  this.a = 1;
function Foo() {
Example
(Object): Returns object.
Returns
[thisArg] (*): The this binding of iteratee.
[iteratee=_.identity] (Function): The function invoked per iteration.
object (Object): The object to iterate over.
Arguments
Iterates over own and inherited enumerable properties of an object invoking iteratee for each property. The iteratee is bound to thisArg and invoked with three arguments: (value, key, object). Iteratee functions may exit iteration early by explicitly returning false.
# Ⓢ Ⓝ
_.forIn(object, [iteratee=_.identity], [thisArg])
// → 'pebbles'
_.findLastKey(users, 'active');
// using the `_.property` callback shorthand
// → 'fred'
_.findLastKey(users, 'active', false);
// using the `_.matchesProperty` callback shorthand
// → 'barney'
_.findLastKey(users, { 'age': 36, 'active': true });
// using the `_.matches` callback shorthand
// → returns `pebbles` assuming `_.findKey` returns `barney`
});
  return chr.age < 40;
_.findLastKey(users, function(chr) {
};
  'pebbles': { 'age': 1,  'active': true }
  'fred':    { 'age': 40, 'active': false },
  'barney':  { 'age': 36, 'active': true },
var users = {
Example
(string|undefined): Returns the key of the matched element, else undefined.
Returns
[thisArg] (*): The this binding of predicate.
[predicate=_.identity] (Function|Object|string): The function invoked per iteration.
object (Object): The object to search.
Arguments
If an object is provided for predicate the created _.matches style callback returns true for elements that have the properties of the given object, else false.
If a value is also provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false. 
If a property name is provided for predicate the created _.property style callback returns the property value of the given element. 
This method is like _.findKey except that it iterates over elements of a collection in the opposite order. 
# Ⓢ Ⓝ
_.findLastKey(object, [predicate=_.identity], [thisArg])
// → 'barney'
_.findKey(users, 'active');
// using the `_.property` callback shorthand
// → 'fred'
_.findKey(users, 'active', false);
// using the `_.matchesProperty` callback shorthand
// → 'pebbles'
_.findKey(users, { 'age': 1, 'active': true });
// using the `_.matches` callback shorthand
// → 'barney' (iteration order is not guaranteed)
});
  return chr.age < 40;
_.findKey(users, function(chr) {
};
  'pebbles': { 'age': 1,  'active': true }
  'fred':    { 'age': 40, 'active': false },
  'barney':  { 'age': 36, 'active': true },
var users = {
Example
(string|undefined): Returns the key of the matched element, else undefined.
Returns
[thisArg] (*): The this binding of predicate.
[predicate=_.identity] (Function|Object|string): The function invoked per iteration.
object (Object): The object to search.
Arguments
If an object is provided for predicate the created _.matches style callback returns true for elements that have the properties of the given object, else false.
If a value is also provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false. 
If a property name is provided for predicate the created _.property style callback returns the property value of the given element. 
This method is like _.find except that it returns the key of the first element predicate returns truthy for instead of the element itself. 
# Ⓢ Ⓝ
_.findKey(object, [predicate=_.identity], [thisArg])
// → { 'user': { 'name': 'barney', 'age': 36 } }
_.defaultsDeep({ 'user': { 'name': 'barney' } }, { 'user': { 'name': 'fred', 'age': 36 } });
Example
(Object): Returns object.
Returns
[sources] (…Object): The source objects.
object (Object): The destination object.
Arguments
Note: This method mutates object.
This method is like _.defaults except that it recursively assigns default properties. 
# Ⓢ Ⓝ
_.defaultsDeep(object, [sources])
// → { 'user': 'barney', 'age': 36 }
_.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
Example
(Object): Returns object.
Returns
[sources] (…Object): The source objects.
object (Object): The destination object.
Arguments
Note: This method mutates object.
Assigns own enumerable properties of source object(s) to the destination object for all destination properties that resolve to undefined. Once a property is set, additional values of the same property are ignored. 
# Ⓢ Ⓝ
_.defaults(object, [sources])
// → true
circle instanceof Shape;
// → true
circle instanceof Circle;
var circle = new Circle;
});
  'constructor': Circle
Circle.prototype = _.create(Shape.prototype, {
}
  Shape.call(this);
function Circle() {
}
  this.y = 0;
  this.x = 0;
function Shape() {
Example
(Object): Returns the new object.
Returns
[properties] (Object): The properties to assign to the object.
prototype (Object): The object to inherit from.
Arguments
Creates an object that inherits from the given prototype object. If a properties object is provided its own enumerable properties are assigned to the created object.
# Ⓢ Ⓝ
_.create(prototype, [properties])
// → { 'user': 'barney', 'age': 36 }
defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
});
  return _.isUndefined(value) ? other : value;
var defaults = _.partialRight(_.assign, function(value, other) {
// using a customizer callback
// → { 'user': 'fred', 'age': 40 }
_.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
Example
(Object): Returns object.
Returns
[thisArg] (*): The this binding of customizer.
[customizer] (Function): The function to customize assigned values.
[sources] (…Object): The source objects.
object (Object): The destination object.
Arguments
_.extend
Aliases
Note: This method mutates object and is based on Object.assign.
(objectValue, sourceValue, key, object, source). 
Assigns own enumerable properties of source object(s) to the destination object. Subsequent sources overwrite property assignments of previous sources. If customizer is provided it’s invoked to produce the assigned values. The customizer is bound to thisArg and invoked with five arguments:
# Ⓢ Ⓝ
_.assign(object, [sources], [customizer], [thisArg])
“Object” Methods
// → a floating-point number between 1.2 and 5.2
_.random(1.2, 5.2);
// → a floating-point number between 0 and 5
_.random(5, true);
// → also an integer between 0 and 5
_.random(5);
// → an integer between 0 and 5
_.random(0, 5);
Example
(number): Returns the random number.
Returns
[floating] (boolean): Specify returning a floating-point number.
[max=1] (number): The maximum possible value.
[min=0] (number): The minimum possible value.
Arguments
Produces a random number between min and max (inclusive). If only one argument is provided a number between 0 and the given number is returned. If floating is true, or either min or max are floats, a floating-point number is returned instead of an integer.
# Ⓢ Ⓝ
_.random([min=0], [max=1], [floating])
// → false
_.inRange(5.2, 4);
// → true
_.inRange(1.2, 2);
// → false
_.inRange(2, 2);
// → false
_.inRange(4, 2);
// → true
_.inRange(4, 8);
// → true
_.inRange(3, 2, 4);
Example
(boolean): Returns true if n is in the range, else false.
Returns
end (number): The end of the range.
[start=0] (number): The start of the range.
n (number): The number to check.
Arguments
Checks if n is between start and up to but not including, end. If end is not specified it’s set to start with start then set to 0.
# Ⓢ Ⓝ
_.inRange(n, [start=0], end)
“Number” Methods
// → 10
_.sum(objects, 'n');
// using the `_.property` callback shorthand
// → 10
});
  return object.n;
_.sum(objects, function(object) {
];
  { 'n': 6 }
  { 'n': 4 },
var objects = [
// → 10
_.sum({ 'a': 4, 'b': 6 });
// → 10
_.sum([4, 6]);
Example
(number): Returns the sum.
Returns
[thisArg] (*): The this binding of iteratee.
[iteratee] (Function|Object|string): The function invoked per iteration.
collection (Array|Object|string): The collection to iterate over.
Arguments
Gets the sum of the values in collection.
# Ⓢ Ⓝ
_.sum(collection, [iteratee], [thisArg])
// → 4100
_.round(4060, -2);
// → 4.01
_.round(4.006, 2);
// → 4
_.round(4.006);
Example
(number): Returns the rounded number.
Returns
[precision=0] (number): The precision to round to.
n (number): The number to round.
Arguments
Calculates n rounded to precision.
# Ⓢ Ⓝ
_.round(n, [precision=0])
// → { 'user': 'barney', 'age': 36 }
_.min(users, 'age');
// using the `_.property` callback shorthand
// → { 'user': 'barney', 'age': 36 }
});
  return chr.age;
_.min(users, function(chr) {
];
  { 'user': 'fred',   'age': 40 }
  { 'user': 'barney', 'age': 36 },
var users = [
// → Infinity
_.min([]);
// → 2
_.min([4, 2, 8, 6]);
Example
(*): Returns the minimum value.
Returns
[thisArg] (*): The this binding of iteratee.
[iteratee] (Function|Object|string): The function invoked per iteration.
collection (Array|Object|string): The collection to iterate over.
Arguments
If an object is provided for iteratee the created _.matches style callback returns true for elements that have the properties of the given object, else false.
If a value is also provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false. 
If a property name is provided for iteratee the created _.property style callback returns the property value of the given element. 
Gets the minimum value of collection. If collection is empty or falsey Infinity is returned. If an iteratee function is provided it’s invoked for each value in collection to generate the criterion by which the value is ranked. The iteratee is bound to thisArg and invoked with three arguments: (value, index, collection). 
# Ⓢ Ⓝ
_.min(collection, [iteratee], [thisArg])
// → { 'user': 'fred', 'age': 40 }
_.max(users, 'age');
// using the `_.property` callback shorthand
// → { 'user': 'fred', 'age': 40 }
});
  return chr.age;
_.max(users, function(chr) {
];
  { 'user': 'fred',   'age': 40 }
  { 'user': 'barney', 'age': 36 },
var users = [
// → -Infinity
_.max([]);
// → 8
_.max([4, 2, 8, 6]);
Example
(*): Returns the maximum value.
Returns
[thisArg] (*): The this binding of iteratee.
[iteratee] (Function|Object|string): The function invoked per iteration.
collection (Array|Object|string): The collection to iterate over.
Arguments
If an object is provided for iteratee the created _.matches style callback returns true for elements that have the properties of the given object, else false.
If a value is also provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false. 
If a property name is provided for iteratee the created _.property style callback returns the property value of the given element. 
Gets the maximum value of collection. If collection is empty or falsey -Infinity is returned. If an iteratee function is provided it’s invoked for each value in collection to generate the criterion by which the value is ranked. The iteratee is bound to thisArg and invoked with three arguments: (value, index, collection). 
# Ⓢ Ⓝ
_.max(collection, [iteratee], [thisArg])
// → 4000
_.floor(4060, -2);
// → 0.04
_.floor(0.046, 2);
// → 4
_.floor(4.006);
Example
(number): Returns the rounded down number.
Returns
[precision=0] (number): The precision to round down to.
n (number): The number to round down.
Arguments
Calculates n rounded down to precision.
# Ⓢ Ⓝ
_.floor(n, [precision=0])
// → 6100
_.ceil(6040, -2);
// → 6.01
_.ceil(6.004, 2);
// → 5
_.ceil(4.006);
Example
(number): Returns the rounded up number.
Returns
[precision=0] (number): The precision to round up to.
n (number): The number to round up.
Arguments
Calculates n rounded up to precision.
# Ⓢ Ⓝ
_.ceil(n, [precision=0])
// → 10
_.add(6, 4);
Example
(number): Returns the sum.
Returns
addend (number): The second number to add.
augend (number): The first number to add.
Arguments
Adds two numbers.
# Ⓢ Ⓝ
_.add(augend, addend)
“Math” Methods
// → { 'a': 1, 'b': 2, 'c': 3 }
_.assign({ 'a': 1 }, _.toPlainObject(new Foo));
// → { 'a': 1, 'b': 2 }
_.assign({ 'a': 1 }, new Foo);
Foo.prototype.c = 3;
}
  this.b = 2;
function Foo() {
Example
(Object): Returns the converted plain object.
Returns
value (*): The value to convert.
Arguments
Converts value to a plain object flattening inherited enumerable properties of value to own properties of the plain object.
# Ⓢ Ⓝ
_.toPlainObject(value)
// → [2, 3]
}(1, 2, 3));
  return _.toArray(arguments).slice(1);
(function() {
Example
(Array): Returns the converted array.
Returns
value (*): The value to convert.
Arguments
Converts value to an array.
# Ⓢ Ⓝ
_.toArray(value)
// → false
_.lte(3, 1);
// → true
_.lte(3, 3);
// → true
_.lte(1, 3);
Example
(boolean): Returns true if value is less than or equal to other, else false.
Returns
other (*): The other value to compare.
value (*): The value to compare.
Arguments
Checks if value is less than or equal to other.
# Ⓢ Ⓝ
_.lte(value, other)
// → false
_.lt(3, 1);
// → false
_.lt(3, 3);
// → true
_.lt(1, 3);
Example
(boolean): Returns true if value is less than other, else false.
Returns
other (*): The other value to compare.
value (*): The value to compare.
Arguments
Checks if value is less than other.
# Ⓢ Ⓝ
_.lt(value, other)
// → false
_.isUndefined(null);
// → true
_.isUndefined(void 0);
Example
(boolean): Returns true if value is undefined, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is undefined.
# Ⓢ Ⓝ
_.isUndefined(value)
// → false
_.isTypedArray([]);
// → true
_.isTypedArray(new Uint8Array);
Example
(boolean): Returns true if value is correctly classified, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is classified as a typed array.
# Ⓢ Ⓝ
_.isTypedArray(value)
// → false
_.isString(1);
// → true
_.isString('abc');
Example
(boolean): Returns true if value is correctly classified, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is classified as a String primitive or object.
# Ⓢ Ⓝ
_.isString(value)
// → false
_.isRegExp('/abc/');
// → true
_.isRegExp(/abc/);
Example
(boolean): Returns true if value is correctly classified, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is classified as a RegExp object.
# Ⓢ Ⓝ
_.isRegExp(value)
// → true
_.isPlainObject(Object.create(null));
// → true
_.isPlainObject({ 'x': 0, 'y': 0 });
// → false
_.isPlainObject([1, 2, 3]);
// → false
_.isPlainObject(new Foo);
}
  this.a = 1;
function Foo() {
Example
(boolean): Returns true if value is a plain object, else false.
Returns
value (*): The value to check.
Arguments
Note: This method assumes objects created by the Object constructor have no inherited enumerable properties.
Checks if value is a plain object, that is, an object created by the Object constructor or one with a [[Prototype]] of null. 
# Ⓢ Ⓝ
_.isPlainObject(value)
// → false
_.isObject(1);
// → true
_.isObject([1, 2, 3]);
// → true
_.isObject({});
Example
(boolean): Returns true if value is an object, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is the language type of Object. (e.g. arrays, functions, objects, regexes, new Number(0), and new String(''))
# Ⓢ Ⓝ
_.isObject(value)
// → false
_.isNumber('8.4');
// → true
_.isNumber(NaN);
// → true
_.isNumber(8.4);
Example
(boolean): Returns true if value is correctly classified, else false.
Returns
value (*): The value to check.
Arguments
Note: To exclude Infinity, -Infinity, and NaN, which are classified as numbers, use the _.isFinite method.
Checks if value is classified as a Number primitive or object. 
# Ⓢ Ⓝ
_.isNumber(value)
// → false
_.isNull(void 0);
// → true
_.isNull(null);
Example
(boolean): Returns true if value is null, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is null.
# Ⓢ Ⓝ
_.isNull(value)
// → false
_.isNative(_);
// → true
_.isNative(Array.prototype.push);
Example
(boolean): Returns true if value is a native function, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is a native function.
# Ⓢ Ⓝ
_.isNative(value)
// → false
_.isNaN(undefined);
// → true
isNaN(undefined);
// → true
_.isNaN(new Number(NaN));
// → true
_.isNaN(NaN);
Example
(boolean): Returns true if value is NaN, else false.
Returns
value (*): The value to check.
Arguments
Note: This method is not the same as isNaN which returns true for undefined and other non-numeric values.
Checks if value is NaN. 
# Ⓢ Ⓝ
_.isNaN(value)
// → true
});
  return _.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/) || undefined;
_.isMatch(object, source, function(value, other) {
var source = { 'greeting': 'hi' };
var object = { 'greeting': 'hello' };
// using a customizer callback
// → false
_.isMatch(object, { 'age': 36 });
// → true
_.isMatch(object, { 'age': 40 });
var object = { 'user': 'fred', 'age': 40 };
Example
(boolean): Returns true if object is a match, else false.
Returns
[thisArg] (*): The this binding of customizer.
[customizer] (Function): The function to customize value comparisons.
source (Object): The object of property values to match.
object (Object): The object to inspect.
Arguments
Note: This method supports comparing properties of arrays, booleans, Date objects, numbers, Object objects, regexes, and strings. Functions and DOM nodes are not supported. Provide a customizer function to extend support for comparing other values.
Performs a deep comparison between object and source to determine if object contains equivalent property values. If customizer is provided it’s invoked to compare values. If customizer returns undefined comparisons are handled by the method instead. The customizer is bound to thisArg and invoked with three arguments: (value, other, index|key). 
# Ⓢ Ⓝ
_.isMatch(object, source, [customizer], [thisArg])
// → false
_.isFunction(/abc/);
// → true
_.isFunction(_);
Example
(boolean): Returns true if value is correctly classified, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is classified as a Function object.
# Ⓢ Ⓝ
_.isFunction(value)
// → false
_.isFinite(Infinity);
// → false
_.isFinite(Object(10));
// → false
_.isFinite(true);
// → false
_.isFinite('10');
// → true
_.isFinite(10);
Example
(boolean): Returns true if value is a finite number, else false.
Returns
value (*): The value to check.
Arguments
Note: This method is based on Number.isFinite.
Checks if value is a finite primitive number. 
# Ⓢ Ⓝ
_.isFinite(value)
// → false
_.isError(Error);
// → true
_.isError(new Error);
Example
(boolean): Returns true if value is an error object, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is an Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, or URIError object.
# Ⓢ Ⓝ
_.isError(value)
// → true
});
  }
    return true;
  if (_.every([value, other], RegExp.prototype.test, /^h(?:i|ello)$/)) {
_.isEqual(array, other, function(value, other) {
var other = ['hi', 'goodbye'];
var array = ['hello', 'goodbye'];
// using a customizer callback
// → true
_.isEqual(object, other);
// → false
object == other;
var other = { 'user': 'fred' };
var object = { 'user': 'fred' };
Example
(boolean): Returns true if the values are equivalent, else false.
Returns
[thisArg] (*): The this binding of customizer.
[customizer] (Function): The function to customize value comparisons.
other (*): The other value to compare.
value (*): The value to compare.
Arguments
_.eq
Aliases
Note: This method supports comparing arrays, booleans, Date objects, numbers, Object objects, regexes, and strings. Objects are compared by their own, not inherited, enumerable properties. Functions and DOM nodes are not supported. Provide a customizer function to extend support for comparing other values.
Performs a deep comparison between two values to determine if they are equivalent. If customizer is provided it’s invoked to compare values. If customizer returns undefined comparisons are handled by the method instead. The customizer is bound to thisArg and invoked with up to three arguments: (value, other [, index|key]). 
# Ⓢ Ⓝ
_.isEqual(value, other, [customizer], [thisArg])
// → false
_.isEmpty({ 'a': 1 });
// → false
_.isEmpty([1, 2, 3]);
// → true
_.isEmpty(1);
// → true
_.isEmpty(true);
// → true
_.isEmpty(null);
Example
(boolean): Returns true if value is empty, else false.
Returns
value (Array|Object|string): The value to inspect.
Arguments
Checks if value is empty. A value is considered empty unless it’s an arguments object, array, string, or jQuery-like collection with a length greater than 0 or an object with own enumerable properties.
# Ⓢ Ⓝ
_.isEmpty(value)
// → false
_.isElement('<body>');
// → true
_.isElement(document.body);
Example
(boolean): Returns true if value is a DOM element, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is a DOM element.
# Ⓢ Ⓝ
_.isElement(value)
// → false
_.isDate('Mon April 23 2012');
// → true
_.isDate(new Date);
Example
(boolean): Returns true if value is correctly classified, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is classified as a Date object.
# Ⓢ Ⓝ
_.isDate(value)
// → false
_.isBoolean(null);
// → true
_.isBoolean(false);
Example
(boolean): Returns true if value is correctly classified, else false.
Returns
value (*): The value to check.
Arguments
Checks if value is classified as a boolean primitive or object.
# Ⓢ Ⓝ
_.isBoolean(value)
// → false
_.isArray(function() { return arguments; }());
// → true
_.isArray([1, 2, 3]);
Example
(boolean): Returns true if value is correctly classified, else false.rnsions.unc (Function): The function to wrap.od names. If no method names are provided all enumerable function properties, own and inherited, of object are bound. 
# Ⓢ Ⓝ.bindAll(object, [methodNames])e': done });tByOrder(collection, iteratees, [orders]) 36], ['barney', 34], ['fred', 48], ['fred', 42]] 10); 'user', function(chr) {['barney', 36], ['fred', 42], ['fred', 48]]_.sortByAll(users, ['user', 'age']), _.values); { 'user': 'fred' },users = [ 1, 2], Math);his.sin(n);.sortBy([1, 2, 3], function(n) { 1, 2]th.sin(n);Object|string): The collection to iterate over.ntsn object is provided for iteratee the created _.matches style callback returns true for elements that have the properties of the given object, else false.lso provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false.  property name is provided for iteratee the created _.property style callback returns the property value of the given element. , index|key, collection). tes an array of elements, sorted in ascending order by the results of running each element in a collection through iteratee. This method performs a stable sort, that is, it preserves the original sort order of equal elements. The iteratee is bound to thisArg and invoked with three arguments:, else false.o provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false. ame is provided for predicate the created _.property style callback returns the property value of the given element. ate returns truthy for any element of collection. The function returns as soon as it finds a passing value and does not iterate over the entire collection. The predicate is bound to thisArg and invoked with three arguments: (value, index|key, collection). [predicate=_.identity], [thisArg]) 7ze('pebbles'); 2 });, 2, 3]);er): Returns the size of collection.rnsection (Array|Object|string): The collection to inspect.r the number of own enumerable properties for objects.er': 'fred',   'age': 40, 'active': true }ve': false },nteed)� 3al, n) {�� [36, 40] (iteration order is not guaranteed)k(userIndex, 'age');ate over.ntse property value of path from all elements in collection.�luck(collection, path)['barney', 'pebbles']]sers, 'active'), mapper);ck shorthandey', 'pebbles'], ['fred']]ion(users, 'active', false), mapper);_.matchesProperty` callback shorthandbbles'], ['barney', 'fred']]this binding of iteratee._.identity] (Function|Object|string): The function invoked per iteration.on (Array|Object|string): The collection to iterate over.rgumentsy, curryRight, drop, dropRight, every, fill, flatten, invert, max, min, parseInt, slice, sortBy, take, takeRight, template, trim, trimLeft, trimRight, trunc, random, range, sample, some, sum, uniq, and wordsds are: lodash methods are guarded to work as iteratees for methods like _.every, _.filter, _.map, _.mapValues, _.reject, and _.some. n object is provided for iteratee the created _.matches style callback returns true for elements that have the properties of the given object, else false. e is also provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false. tion, path, [args]) 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }, String);ject.code);ject) {/ → { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }turn String.fromCharCode(object.code);.indexBy(keyData, function(object) {: { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }Data, 'dir');ng each element of collection through iteratee. The corresponding value of each key is the last element responsible for generating the key. The iteratee function is bound to thisArg and invoked with three arguments:tion invoked per iteration.tring): The collection to iterate over.mentsvided for iteratee the created _.matches style callback returns true for elements that have the properties of the given object, else false. value is also provided for thisArg the created _.matchesProperty style callback returns true for elements that have a matching property value, else false. vided for iteratee the created _.property style callback returns the property value of the given element. tion). d of keys generated from the results of running each element of collection through iteratee. The corresponding value of each key is an array of the elements responsible for generating the key. The iteratee is bound to thisArg and invoked with three arguments:�.groupBy(collection, [iteratee=_.identity], [thisArg])ach value from right to left and returns the array collection to iterate over.rguments" property are iterated like arrays. To avoid this behavior _.forIn or _.forOwn may be used for object iteration.ue, index|key, collection). Iteratee functions may exit iteration early by explicitly returning false. f collection invoking iteratee for each element. The iteratee is bound to thisArg and invoked with three arguments:ction, [iteratee=_.identity], [thisArg])/ → 'fred'ndWhere(users, { 'age': 40, 'active': false }), 'user');/ → 'barney'ndWhere(users, { 'age': 36, 'active': true }), 'user');e': true },ments of collection, returning the first element predicate returns truthy for. The predicate is bound to thisArg and invoked with three arguments: (value, index|key, collection).  shorthand ['fred']rty` callback shorthandue.N, _.prototype.valueOf chained sequence to extract the unwrapped value.dropWhile, filter, first, initial, last, map, pluck, reject, rest, reverse, slice, take, takeRight, takeRightWhile, takeWhile, toArray, and where is deferred until _#value is implicitly or explicitly called. ed elements. of iteratee.The function to combine grouped values.rray): The arrays to process.uments_.zip except that it accepts an iteratee to specify how grouped values should be combined. The iteratee is bound to thisArg and invoked with four arguments: (accumulator, value, index, group).Arg])['fred', 'barney'], [30, 40]); 'barney': 40 }30], ['barney', 40]]);h (MP)",value:"MP"},{name:"Mbabane, Swaziland Exch (SD)",value:"SD"},{name:"Mendoza SE - Argentina (AM)",value:"AM"},{name:"Mexico (MM) (MM)",value:"MM"},{name:"Micex - Main Market (RX)",value:"RX"},{name:"Micex - NMD (RN)",value:"RN"},{name:"Micex - Repo (RP)",value:"RP"},{name:"Midwest Stock Exchange (UM)",value:"UM"},{name:"Milan New Market - obsolete (NI)",value:"NI"},{name:"Monaco Equities, France (MN)",value:"MN"},{name:"Mongolia Equity Exchang (MO)",value:"MO"},{name:"Montenegro Stock Exchan (ME)",value:"ME"},{name:"Montevideo, Uruguay (UY)",value:"UY"},{name:"Montreal Equities (CM)",value:"CM"},{name:"Munich Stock Exchange (GM)",value:"GM"},{name:"Muscat, Oman Exch (OM)",value:"OM"},{name:"NASD ADF (UD)",value:"UD"},{name:"NASD AM (UA)",value:"UA"},{name:"NASD BOST (UB)",value:"UB"},{name:"NASD CINC (UC)",value:"UC"},{name:"NASD MW (UM)",value:"UM"},{name:"NASD PACIFIC (UP)",value:"UP"},{name:"NASD PHILA (UX)",value:"UX"},{name:"NASDAQ (SIAC wire) (UT)",value:"UT"},{name:"NASDAQ (UQ)",value:"UQ"},{name:"NASDAQ BYX (VY)",value:"VY"},{name:"NASDAQ EDGA (VJ)",value:"VJ"},{name:"NASDAQ EDGX (VK)",value:"VK"},{name:"NASDAQ OMX Europe NEURO (NQ)",value:"NQ"},{name:"NASDAQ PRIME (UQ)",value:"UQ"},{name:"NYSE Arca Europe (NR)",value:"NR"},{name:"NYSE Euronext London (LD)",value:"LD"},{name:"Nagoya SE Indices (A) (NP)",value:"NP"},{name:"Nagoya Stock Exchange (JN)",value:"JN"},{name:"Nagoya Stock Exchange (NGYA)",value:"NGYA"},{name:"Nairobi Stk Exch (KN)",value:"KN"},{name:"Namibian Stk Exch (NW)",value:"NW"},{name:"Nasdaq (OTC Bulletin Board) (UU)",value:"UU"},{name:"Nasdaq (non-OTC Bulletin Board) (UV)",value:"UV"},{name:"Nasdaq CBOE (UO)",value:"UO"},{name:"Nasdaq Deutschland Exchange (ND)",value:"ND"},{name:"Nasdaq Dubai Equity (DU)",value:"DU"},{name:"Nasdaq European Session (UE)",value:"UE"},{name:"Nasdaq International Securities Exchange (UL)",value:"UL"},{name:"Nasdaq NYSE (UN)",value:"UN"},{name:"Nasdaq Trade Reporting Facility (UJ)",value:"UJ"},{name:"National Stock Exchange (IS)",value:"IS"},{name:"Nepal Stock Exchange (NK)",value:"NK"},{name:"Netherlands Antilles (NT)",value:"NT"},{name:"New York Stock Exchange (UN)",value:"UN"},{name:"New Zealand OTC (NV)",value:"NV"},{name:"New Zealand Stock Excha (NZ)",value:"NZ"},{name:"Newex(new east european exch) (EX)",value:"EX"},{name:"Nicaragua (NC)",value:"NC"},{name:"Nigeria Stock Exch (NL)",value:"NL"},{name:"Nilex (EI)",value:"EI"},{name:"Nordic Growth Market (NG)",value:"NG"},{name:"Nordic Growth Mkt. OTC (XG)",value:"XG"},{name:"Northbound Shanghai-Hong Kong Connect (C1)",value:"C1"},{name:"Northbound Shenzhen-Hong Kong Connect (C2)",value:"C2"},{name:"Norwegian OTC (NS)",value:"NS"},{name:"OFEX LONDON - Small Caps (PZ)",value:"PZ"},{name:"OMX OTC (XO)",value:"XO"},{name:"OPEX MTF Portugal (PX)",value:"PX"},{name:"OTC London (OF)",value:"OF"},{name:"OTC Markets (PQ)",value:"PQ"},{name:"OTC-X Bern KantonalBank (XK)",value:"XK"},{name:"Omega ATS (TG)",value:"TG"},{name:"Omega Lynx ATS (DG)",value:"DG"},{name:"Osaka SE Indices (A) (NN)",value:"NN"},{name:"Osaka SE Indices (P) (NB)",value:"NB"},{name:"Osaka Stock Exchange (JO)",value:"JO"},{name:"Oslo Bors (NO)",value:"NO"},{name:"Oslo OTC (XN)",value:"XN"},{name:"PLUS Europe (PG)",value:"PG"},{name:"POSIT (P2)",value:"P2"},{name:"Pacific Stock Exchange (UP)",value:"UP"},{name:"Pakistan Equities (PA)",value:"PA"},{name:"Palestine (PS)",value:"PS"},{name:"Panama City Stock Exch (PP)",value:"PP"},{name:"Paris Stock Exchange (FIM) (FP)",value:"FP"},{name:"Peru SE (PE)",value:"PE"},{name:"Philadelphia Stock Exchange (UX)",value:"UX"},{name:"Philippines Stock Exch. (PM)",value:"PM"},{name:"Plus Markets OTC (XP)",value:"XP"},{name:"Poland Stk Exch (PW)",value:"PW"},{name:"Possibly Mesdaq (Malaysia) - suspicious object names (MQ)",value:"MQ"},{name:"Prague Global (CP)",value:"CP"},{name:"Prague Kobos/Continuous (CK)",value:"CK"},{name:"Prague SPAD Stock Excha (CD)",value:"CD"},{name:"QUOTE MTF (QM)",value:"QM"},{name:"Qatar (QD)",value:"QD"},{name:"Quito Stock Exchange (EQ)",value:"EQ"},{name:"Quotrix Equities & Funds (QT)",value:"QT"},{name:"RTS Standard Market (RU)",value:"RU"},{name:"RTS Ukraine Exchange (UK)",value:"UK"},{name:"Recycled 14-Feb-08 (was Global EU) (NM)",value:"NM"},{name:"Recycled Japan Nasdaq (JX)",value:"JX"},{name:"Reserved for MOST NASDAQ Global Select Market (UW)",value:"UW"},{name:"Reserved for Most Nasdaq Small Cap (UR)",value:"UR"},{name:"Reykjavik, Iceland (IR)",value:"IR"},{name:"Riga Fixing Price (LF)",value:"LF"},{name:"Riga Stock Exch Composit,Latvia ~ (LR)",value:"LR"},{name:"Riga Variable Price (LV)",value:"LV"},{name:"Riga consolidated E821 & E822 (LG)",value:"LG"},{name:"Rio Stock Exch (Soma) ( (BO)",value:"BO"},{name:"Romania - RASDAQ (RQ)",value:"RQ"},{name:"Russia Skate Press (RR)",value:"RR"},{name:"SBI Japannext PTS (JE)",value:"JE"},{name:"SBI Japannext X-Market (JU)",value:"JU"},{name:"SIAC ADF (UD)",value:"UD"},{name:"SIAC BYX (VY)",value:"VY"},{name:"SIAC CTS TRF (UJ)",value:"UJ"},{name:"SIAC EDGA (VJ)",value:"VJ"},{name:"SIAC EDGX (VK)",value:"VK"},{name:"SIBEX equities (RZ)",value:"RZ"},{name:"SIX Off-Book (XW)",value:"XW"},{name:"SWX Quotematch (ALEX) (SX)",value:"SX"},{name:"Sao Paulo Outcry, (Brazil) (BV)",value:"BV"},{name:"Sao Paulo, Brazil (Elec.) (BE)",value:"BE"},{name:"Sao Paulo, Brazil (Simul.) (BL)",value:"BL"},{name:"Sapporo Stock Exchange (JS)",value:"JS"},{name:"Sarajevo SE (BT)",value:"BT"},{name:"Saudi Arabia (AB)",value:"AB"},{name:"Senegal (ZS)",value:"ZS"},{name:"Serbian Exchange (SG)",value:"SG"},{name:"Shanghai Stock Exchange (CG)",value:"CG"},{name:"SharesPost Market (SH)",value:"SH"},{name:"Shenzhen Stock Exchange (CS)",value:"CS"},{name:"Siac International Securities Exchange (UL)",value:"UL"},{name:"Sigma X ATS (TY)",value:"TY"},{name:"Singapore Stock Exchange (SP)",value:"SP"},{name:"Soffex (swiss options) (EUZ)",value:"EUZ"},{name:"Southbound Shanghai-Hong Kong Connect (H1)",value:"H1"},{name:"Spain Continuous Market (SQ)",value:"SQ"},{name:"Spain Equities (SM)",value:"SM"},{name:"Sri Lanka Stock Exch (SL)",value:"SL"},{name:"Stockholm Stock Exchange (SS)",value:"SS"},{name:"Stuttgart OTC (XS)",value:"XS"},{name:"Stuttgart Stock Exchange (GS)",value:"GS"},{name:"Stuttgart Warrants (GW)",value:"GW"},{name:"Surabaya Stock exchange,Indonesi (IY)",value:"IY"},{name:"Swedish index (SS)",value:"SS"},{name:"Swiss Low Latency BBO (IA)",value:"IA"},{name:"Swiss Stock Exch (EBS) (SE)",value:"SE"},{name:"Switzerland Equities (SW)",value:"SW"},{name:"TMX Select (TJ)",value:"TJ"},{name:"TOM MTF (MT)",value:"MT"},{name:"TSE-Tokyo Stock Exchange (JG)",value:"JG"},{name:"TSX Canadian Exchange (CJ)",value:"CJ"},{name:"Taiwan Stock Exchange (TT)",value:"TT"},{name:"Talinn Stock Exchange, Estonia (ET)",value:"ET"},{name:"Tanzania (TZ)",value:"TZ"},{name:"Tehran, Iran Exch (IE)",value:"IE"},{name:"Tokyo Stock Exchange (JT)",value:"JT"},{name:"Toronto Equities (CT)",value:"CT"},{name:"Toronto Free Index (CT)",value:"CT"},{name:"Tradegate (Equities) (TH)",value:"TH"},{name:"Tradepoint (London) (LT)",value:"LT"},{name:"TriAct TSX (TR)",value:"TR"},{name:"TriAct Ventures (TV)",value:"TV"},{name:"Trinidad & Tobago Stk Exch (TP)",value:"TP"},{name:"Tunis Stk Exch (TU)",value:"TU"},{name:"Turks & Caico Islands (TC)",value:"TC"},{name:"Turquoise (TQ)",value:"TQ"},{name:"UBS MTF (S2)",value:"S2"},{name:"US Equities (US)",value:"US"},{name:"Uganda (UG)",value:"UG"},{name:"Ukraine PFTS (Order-dri (OU)",value:"OU"},{name:"Ukraine PFTS (Quote-dri (QU)",value:"QU"},{name:"Ukraine PFTS (UZ)",value:"UZ"},{name:"Valencia Stock Exchange (SA)",value:"SA"},{name:"Valletta (Malta) Stk Ex (MV)",value:"MV"},{name:"Valores de Caracas, Ven (VS)",value:"VS"},{name:"Vancouver Equities (CV)",value:"CV"},{name:"Varazdin Stock Exchange, Croatia (VA)",value:"VA"},{name:"Venezuela (VC)",value:"VC"},{name:"Vienna OTC (XA)",value:"XA"},{name:"Vienna Stock Exchange (AV)",value:"AV"},{name:"Vietnam Equities (VN)",value:"VN"},{name:"Vilnius Stock Exchange (LH)",value:"LH"},{name:"VirtX Low Latency BBO (CO)",value:"CO"},{name:"Virtx (VX)",value:"VX"},{name:"Winnipeg (CW)",value:"CW"},{name:"Xetra Euro Stars Exchan (GE)",value:"GE"},{name:"Xetra Exchange Traded Fu (GT)",value:"GT"},{name:"Xetra German Equities (AKA Ibis) (GY)",value:"GY"},{name:"Xetra International Market (XIM) (GK)",value:"GK"},{name:"Xetra Stars Exchange (GQ)",value:"GQ"},{name:"Zagreb Stock Exchange (ZA)",value:"ZA"},{name:"Zambia Stock Exch (ZL)",value:"ZL"},{name:"Zimbabwe Stock Exch (ZH)",value:"ZH"},{name:"for Kazakhstan (KZ)",value:"KZ"},{name:"micex exchange,Russia, (RM)",value:"RM"},{name:"south pacific stock exc (FS)",value:"FS"}],size:404}xitue:"BDR"},{name:"Basket WRT",value:"Basket WRT"},{name:"Belgium Cert",value:"Belgium Cert"},{name:"Bond",value:"Bond"},{name:"CDI",value:"CDI"},{name:"CDR",value:"CDR"},{name:"CEDEAR",value:"CEDEAR"},{name:"CONTRACT FOR DIFFERENCE",value:"CONTRACT FOR DIFFERENCE"},{name:"Closed-End Fund",value:"Closed-End Fund"},{name:"Cmdt Fut WRT",value:"Cmdt Fut WRT"},{name:"Cmdt Idx WRT",value:"Cmdt Idx WRT"},{name:"Common Stock",value:"Common Stock"},{name:"Conv Bond",value:"Conv Bond"},{name:"Currency WRT",value:"Currency WRT"},{name:"DIVIDEND NEUTRAL STOCK FUTURE",value:"DIVIDEND NEUTRAL STOCK FUTURE"},{name:"Dutch Cert",value:"Dutch Cert"},{name:"EDR",value:"EDR"},{name:"ETP",value:"ETP"},{name:"Equity Option",value:"Equity Option"},{name:"Equity WRT",value:"Equity WRT"},{name:"FDIC",value:"FDIC"},{name:"FIDC",value:"FIDC"},{name:"Foreign Sh.",value:"Foreign Sh."},{name:"Fund of Funds",value:"Fund of Funds"},{name:"GDR",value:"GDR"},{name:"German Cert",value:"German Cert"},{name:"HDR",value:"HDR"},{name:"Hedge Fund",value:"Hedge Fund"},{name:"I.R. Fut WRT",value:"I.R. Fut WRT"},{name:"I.R. Swp WRT",value:"I.R. Swp WRT"},{name:"Index WRT",value:"Index WRT"},{name:"Indx Fut WRT",value:"Indx Fut WRT"},{name:"Ltd Part",value:"Ltd Part"},{name:"MLP",value:"MLP"},{name:"Misc.",value:"Misc."},{name:"Mutual Fund",value:"Mutual Fund"},{name:"NVDR",value:"NVDR"},{name:"NY Reg Shrs",value:"NY Reg Shrs"},{name:"Open-End Fund",value:"Open-End Fund"},{name:"Participate Cert",value:"Participate Cert"},{name:"Preference",value:"Preference"},{name:"Prfd WRT",value:"Prfd WRT"},{name:"Pvt Eqty Fund",value:"Pvt Eqty Fund"},{name:"RDC",value:"RDC"},{name:"REIT",value:"REIT"},{name:"Receipt",value:"Receipt"},{name:"Right",value:"Right"},{name:"Royalty Trst",value:"Royalty Trst"},{name:"SDR",value:"SDR"},{name:"SINGLE STOCK DIVIDEND FUTURE",value:"SINGLE STOCK DIVIDEND FUTURE"},{name:"SINGLE STOCK FORWARD",value:"SINGLE STOCK FORWARD"},{name:"SINGLE STOCK FUTURE",value:"SINGLE STOCK FUTURE"},{name:"Savings Plan",value:"Savings Plan"},{name:"Savings Share",value:"Savings Share"},{name:"Sec Lending",value:"Sec Lending"},{name:"Stapled Security",value:"Stapled Security"},{name:"Swiss Cert",value:"Swiss Cert"},{name:"TDR",value:"TDR"},{name:"Tracking Stk",value:"Tracking Stk"},{name:"UIT",value:"UIT"},{name:"Unit",value:"Unit"}],size:63}