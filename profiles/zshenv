
function cortex-get-current-profile()(
  jq -r ".currentProfile" ~/.cortex/config
)

function cortex-pluck-from-profile(){
  CURRENT_PROFILE=${2:-$(cortex-get-current-profile)}
  cat ~/.cortex/config | jq ".profiles" | jq ".[\"${CURRENT_PROFILE}\"]" | jq -r ".${1}"
}

function cortex-reconfigure()(
  CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  URL=$(cortex-pluck-from-profile "url" "${CURRENT_PROFILE}")
  USERNAME=$(cortex-pluck-from-profile "username" "${CURRENT_PROFILE}")
  ACCONT=$(cortex-pluck-from-profile "account" "${CURRENT_PROFILE}")
  cortex configure \
    --profile "${CURRENT_PROFILE}" \
    --url ${URL} \
    --username ${USERNAME} \
    --account ${ACCONT}
)

function cortex-get-jwt()(
  CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  cortex-pluck-from-profile "token" "${CURRENT_PROFILE}"
)

function cortex-get-endpoint()(
  CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  cortex-pluck-from-profile "url" "${CURRENT_PROFILE}"
)

function cortex-get-account()(
  CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  cortex-pluck-from-profile "account" "${CURRENT_PROFILE}"
)

function cortex-get-private-registry()(
  CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  VAR_URL=$(cortex-get-endpoint ${CURRENT_PROFILE})
  echo "${VAR_URL}" | sed -E -e 's-https?://--g' | sed -e 's/^api./private-registry./g'
)

function cortex-docker-login(){
  CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  JWT_TOKEN=$(cortex-get-jwt "${CURRENT_PROFILE}")
  PRIVATE_REGISTRY=$(cortex-get-private-registry "${CURRENT_PROFILE}")
  CONFIG_DIR=~/.cortex/docker-${CURRENT_PROFILE}
  test -d ${CONFIG_DIR} || mkdir ${CONFIG_DIR}
  docker --config ${CONFIG_DIR} login -u cli --password "${JWT_TOKEN}" ${PRIVATE_REGISTRY} 
}

function cortex-docker-push(){
  CURRENT_PROFILE=${3:-$(cortex-get-current-profile)}
  ACCOUNT=$(cortex-get-account "${CURRENT_PROFILE}")
  PRIVATE_REGISTRY=$(cortex-get-private-registry "${CURRENT_PROFILE}")
  CONFIG_DIR="~/.cortex/docker-${CURRENT_PROFILE}"
  NEW_IMAGE_NAME=${PRIVATE_REGISTRY}/${ACCOUNT}/${2}
  echo ${PRIVATE_REGISTRY} ${NEW_IMAGE_NAME} ${ACCOUNT} ${CURRENT_PROFILE}
  docker --config ${CONFIG_DIR} tag ${1} ${NEW_IMAGE_NAME}
  docker --config ${CONFIG_DIR} push ${NEW_IMAGE_NAME}
}

function cortex_cli_command()(
  URL_PATH=$1
  shift;
  CURRENT_PROFILE=$(cortex-get-current-profile)
  JWT_TOKEN=$(cortex-get-jwt ${CURRENT_PROFILE})
  CORTEX_API_ENDPOINT=$(cortex-get-endpoint ${CURRENT_PROFILE})
  set -o xtrace
  curl -s "${CORTEX_API_ENDPOINT}/${URL_PATH}" -H "authorization: Bearer ${JWT_TOKEN}" -H "content-type: application/json" ${@}
)

function cortex_cli_command_without_url()(
  URL_PATH=$1
  shift;
  CURRENT_PROFILE=$(cortex-get-current-profile)
  JWT_TOKEN=$(cortex-get-jwt ${CURRENT_PROFILE})
  CORTEX_API_ENDPOINT=$(cortex-get-endpoint ${CURRENT_PROFILE})
  set -o xtrace
  curl -s "${URL_PATH}" -H "authorization: Bearer ${JWT_TOKEN}" -H "content-type: application/json" ${@}
)

function cortex-set-profile() {
  cortex configure set-profile ${1}
  CURRENT_PROFILE=$(cat ~/.cortex/config | jq -r '.currentProfile')
  CURRENT_PROFILE_CONTENT=$(cat ~/.cortex/config | jq -c ".profiles | .[\"${CURRENT_PROFILE}\"]")
  cp ~/.cortex/config ~/.cortex/config_bck
  cat ~/.cortex/config_bck | jq ".profiles.default |= ${CURRENT_PROFILE_CONTENT}" > ~/.cortex/config
}

function cortex-latest-task-status(){
   JOB_NAME=$1
   LATEST_TASK_ID=$(cortex tasks list ${JOB_NAME} --json | jq '.tasks' | jq 'sort_by(-.createdAt)' | jq -r '.[0].taskId')
   # LATEST_TASK_ID=$(cortex tasks list ${JOB_NAME} --json | jq '.tasks' | jq 'map(select(.status != "FAILED")) | sort_by(-.createdAt)' | jq -r '.[0].taskId')
   echo "LOGS for ${JOB_NAME} ${LATEST_TASK_ID}"
   cortex jobs status ${JOB_NAME}
   cortex tasks logs ${JOB_NAME} ${LATEST_TASK_ID}
   cortex_cli_command v2/jobs/${JOB_NAME}/tasks/${LATEST_TASK_ID}/logs | jq '.'
}

function cortex-simulate-payload(){
  CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  JWT_TOKEN=$(cortex-get-jwt ${CURRENT_PROFILE})
  CORTEX_API_ENDPOINT=$(cortex-get-endpoint ${CURRENT_PROFILE})
  echo '{}' \
    | jq -c \
      --arg endpoint "${CORTEX_API_ENDPOINT}" \
      --arg token "${JWT_TOKEN}" \
      '(.properties = {}) | (.paylaod = {}) | (.apiEndpoint = $endpoint) | (.token = $token)' \
    | jq -c '(.instanceId = "1")| (.sessionId = "1")| (.activationId = "1")| (.channelId = "1")| (.typeName = "1")| (.timestamp = "1")| (.datasetBindings = [])| (.entityBindings = [])'
}

function _cortex-set-profile() {
  compadd $(cat ~/.cortex/config | jq -r ".profiles | keys | .[]" | egrep -v '^default$' | xargs echo)
}

function _cortex(){
  compadd $(cortex --help | grep '\[cmd\]' | sed 's/\[cmd\].*//g' | egrep -o "[a-zA-Z]+" | xargs echo)
}

function _cortex-latest-task-status(){
  compadd $(cortex jobs list --json | jq -r ".[] | .name" | xargs echo)
}

function gocd_encrypt() {
 echo "${1}" | jq -R '{value: .}' | curl -s 'https://ci.c1.io/go/api/admin/encrypt' -u 'admin:C0gN!T!v3Sc@l3G0Cd' -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -X POST -d @- | jq -r .encrypted_value
}

function gocd_decrypt() {
 echo "${1}" | jq -R '{value: .}' | curl -s 'https://ci.c1.io/go/api/admin/decrypt' -u 'admin:C0gN!T!v3Sc@l3G0Cd' -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -X POST -d @- | jq -r .decrypted_value
}

function utc_now(){
  date -u +"%Y-%m-%dT%H:%M:%SZ"
}

function utc_from_seconds(){
  date -u -r ${1} +"%Y-%m-%dT%H:%M:%SZ"
}

function utc_from_miliseconds(){
  utc_from_seconds $(expr ${1} / 1000)
}

function noteplan_date_now(){
  date +"@done(%Y-%m-%d %I:%M %p)"
}

function cortex-studio-dev(){
  CORTEX_API_URL="https://api.cortex-dev.insights.ai" CORTEX_DOCS_URL="https://docs.cortex-dev.insights.ai" \
    "/Applications/Cortex Studio - Dev.app/Contents/MacOS/Cortex Studio"
}

function cortex-studio-stage(){
  CORTEX_API_URL="https://api.cortex-stage.insights.ai" CORTEX_DOCS_URL="https://docs.cortex-stage.insights.ai" \
    "/Applications/Cortex Studio - Stage.app/Contents/MacOS/Cortex Studio"
}

function cortex-studio-prod(){
  CORTEX_API_URL="https://api.cortex.insights.ai" CORTEX_DOCS_URL="https://docs.cortex.insights.ai" \
    "/Applications/Cortex Studio - Prod.app/Contents/MacOS/Cortex Studio"
}



precmd_functions=(week_prompt)
