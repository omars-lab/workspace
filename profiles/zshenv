#!/bin/zsh

function cortex-get-current-profile()(
  jq -r ".currentProfile" ~/.cortex/config
)

function cortex-pluck-from-profile()(
  local CURRENT_PROFILE=${2:-$(cortex-get-current-profile)}
  echo "Picking ${1} from profile: ${CURRENT_PROFILE}" >&2
  jq -r --arg profile "${CURRENT_PROFILE}" --arg path "${1}" '.profiles[($profile)][($path)]' ~/.cortex/config 
)

function cortex-get-jwt()(
  local CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  cortex-pluck-from-profile "token" "${CURRENT_PROFILE}"
)

function cortex-get-endpoint()(
  local CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  cortex-pluck-from-profile "url" "${CURRENT_PROFILE}"
)

function cortex-get-account()(
  local CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  cortex-pluck-from-profile "account" "${CURRENT_PROFILE}"
)

function cortex-get-username()(
  local CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  cortex-pluck-from-profile "username" "${CURRENT_PROFILE}"
)

function cortex-get-private-registry()(
  local CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  local VAR_URL=$(cortex-get-endpoint ${CURRENT_PROFILE})
  echo "${VAR_URL}" | sed -E -e 's-https?://--g' | sed -e 's/^api./private-registry./g'
)

function cortex-docker-login()(
  local CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  local JWT_TOKEN=$(cortex-get-jwt "${CURRENT_PROFILE}")
  local PRIVATE_REGISTRY=$(cortex-get-private-registry "${CURRENT_PROFILE}")
  local CONFIG_DIR=~/.cortex/docker-${CURRENT_PROFILE}
  test -d ${CONFIG_DIR} || mkdir ${CONFIG_DIR}
  docker --config ${CONFIG_DIR} login -u cli --password "${JWT_TOKEN}" ${PRIVATE_REGISTRY}
)

function cortex-docker-push()(
  local CURRENT_PROFILE=${3:-$(cortex-get-current-profile)}
  local CORTEX_ACCOUNT=$(cortex-get-account "${CURRENT_PROFILE}")
  local PRIVATE_REGISTRY=$(cortex-get-private-registry "${CURRENT_PROFILE}")
  local CONFIG_DIR="~/.cortex/docker-${CURRENT_PROFILE}"
  local NEW_IMAGE_NAME=${PRIVATE_REGISTRY}/${CORTEX_ACCOUNT}/${2}
  echo ${PRIVATE_REGISTRY} ${NEW_IMAGE_NAME} ${CORTEX_ACCOUNT} ${CURRENT_PROFILE}
  docker --config ${CONFIG_DIR} tag ${1} ${NEW_IMAGE_NAME}
  docker --config ${CONFIG_DIR} push ${NEW_IMAGE_NAME}
)

function cortex_cli_command()(
  local URL_PATH=$1
  shift;
  local CURRENT_PROFILE=$(cortex-get-current-profile)
  local JWT_TOKEN=$(cortex-get-jwt ${CURRENT_PROFILE})
  local CORTEX_API_ENDPOINT=$(cortex-get-endpoint ${CURRENT_PROFILE})
  set -o xtrace
  curl -s "${CORTEX_API_ENDPOINT}/${URL_PATH}" -H "authorization: Bearer ${JWT_TOKEN}" -H "content-type: application/json" ${@}
)

function cortex_cli_command_without_url()(
  local URL_PATH=$1
  shift;
  local CURRENT_PROFILE=$(cortex-get-current-profile)
  local JWT_TOKEN=$(cortex-get-jwt ${CURRENT_PROFILE})
  local CORTEX_API_ENDPOINT=$(cortex-get-endpoint ${CURRENT_PROFILE})
  set -o xtrace
  curl -s "${URL_PATH}" -H "authorization: Bearer ${JWT_TOKEN}" -H "content-type: application/json" ${@}
)

function cortex_set_profile() {
  cortex configure set-profile ${1}
  local CURRENT_PROFILE=$(cat ~/.cortex/config | jq -r '.currentProfile')
  local CURRENT_PROFILE_CONTENT=$(cat ~/.cortex/config | jq -c ".profiles | .[\"${CURRENT_PROFILE}\"]")
  cp ~/.cortex/config ~/.cortex/config_bck
  cat ~/.cortex/config_bck | jq ".profiles.default |= ${CURRENT_PROFILE_CONTENT}" > ~/.cortex/config
}

function cortex-latest-task-status(){
   local JOB_NAME=$1
   local LATEST_TASK_ID=$(cortex tasks list ${JOB_NAME} --json | jq '.tasks' | jq 'sort_by(-.createdAt)' | jq -r '.[0].taskId')
   # LATEST_TASK_ID=$(cortex tasks list ${JOB_NAME} --json | jq '.tasks' | jq 'map(select(.status != "FAILED")) | sort_by(-.createdAt)' | jq -r '.[0].taskId')
   echo "LOGS for ${JOB_NAME} ${LATEST_TASK_ID}"
   cortex jobs status ${JOB_NAME}
   cortex tasks logs ${JOB_NAME} ${LATEST_TASK_ID}
   cortex_cli_command v2/jobs/${JOB_NAME}/tasks/${LATEST_TASK_ID}/logs | jq '.'
}

function cortex-simulate-payload(){
  local CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
  local JWT_TOKEN=$(cortex-get-jwt ${CURRENT_PROFILE})
  local CORTEX_API_ENDPOINT=$(cortex-get-endpoint ${CURRENT_PROFILE})
  echo '{}' \
    | jq -c \
      --arg endpoint "${CORTEX_API_ENDPOINT}" \
      --arg token "${JWT_TOKEN}" \
      '(.properties = {}) | (.paylaod = {}) | (.apiEndpoint = $endpoint) | (.token = $token)' \
    | jq -c '(.instanceId = "1")| (.sessionId = "1")| (.activationId = "1")| (.channelId = "1")| (.typeName = "1")| (.timestamp = "1")| (.datasetBindings = [])| (.entityBindings = [])'
}

function gocd_encrypt() {
 echo "${1}" | jq -R '{value: .}' | curl -s 'https://c12e.c1.io/go/api/admin/encrypt' -u 'admin:C0gN!T!v3Sc@l3G0Cd' -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -X POST -d @- | jq -r .encrypted_value
}

function gocd_decrypt() {
 echo "${1}" | jq -R '{value: .}' | curl -s 'https://c12e.c1.io/go/api/admin/decrypt' -u 'admin:C0gN!T!v3Sc@l3G0Cd' -H 'Accept: application/vnd.go.cd.v1+json' -H 'Content-Type: application/json' -X POST -d @- | jq -r .decrypted_value
}

function utc_now(){
  date -u +"%Y-%m-%dT%H:%M:%SZ"
}

function utc_from_seconds(){
  date -u -r ${1} +"%Y-%m-%dT%H:%M:%SZ"
}

function utc_from_miliseconds(){
  utc_from_seconds $(expr ${1} / 1000)
}

function noteplan_date_now(){
  date +"@done(%Y-%m-%d %I:%M %p)"
}

function cortex-studio-next(){
  CORTEX_API_URL="https://api.cortex-next.insights.ai" CORTEX_DOCS_URL="https://docs.cortex-next.insights.ai" \
    "/Applications/Cortex Studio - Dev.app/Contents/MacOS/Cortex Studio"
}

function cortex-studio-dev(){
  CORTEX_API_URL="https://api.cortex-dev.insights.ai" CORTEX_DOCS_URL="https://docs.cortex-dev.insights.ai" \
    "/Applications/Cortex Studio - Dev.app/Contents/MacOS/Cortex Studio"
}

function cortex-studio-stage(){
  CORTEX_API_URL="https://api.cortex-stage.insights.ai" CORTEX_DOCS_URL="https://docs.cortex-stage.insights.ai" \
    "/Applications/Cortex Studio - Stage.app/Contents/MacOS/Cortex Studio"
}

function cortex-studio-prod(){
  CORTEX_API_URL="https://api.cortex.insights.ai" CORTEX_DOCS_URL="https://docs.cortex.insights.ai" \
    "/Applications/Cortex Studio - Prod.app/Contents/MacOS/Cortex Studio"
}

function cortex-studio-prod-debugged(){
  CORTEX_API_URL="https://api.cortex.insights.ai" CORTEX_DOCS_URL="https://docs.cortex.insights.ai" \
    "/Applications/Cortex Studio - Prod.app/Contents/MacOS/Cortex Studio" --inspect=5858 studio
}


# function cortex-reconfigure()(
#   CURRENT_PROFILE=${1:-$(cortex-get-current-profile)}
#   URL=$(cortex-pluck-from-profile "url" "${CURRENT_PROFILE}")
#   CORTEX_USER=$(cortex-pluck-fromc-profile "username" "${CURRENT_PROFILE}")
#   ACCONT=$(cortex-pluck-from-profile "account" "${CURRENT_PROFILE}")
#   cortex configure \
#     --profile "${CURRENT_PROFILE}" \
#     --url ${URL} \
#     --username ${CORTEX_USER} \
#     --account ${ACCONT}
# )

function cortex-reconfigure(){
  local URL=$(cortex-pluck-from-profile "url" "${1}")
  local CORTEX_ACCOUNT=$(cortex-pluck-from-profile "account" "${1}")
  local CORTEX_USER=$(cortex-pluck-from-profile "username" "${1}")
  local PASSWORD=$(jq -r ".[\"${1}\"]" ~/.cortex/passwords.json)
  echo "cortex configure --profile '${1}' --url '${URL}' --account '${CORTEX_ACCOUNT}' --username '${CORTEX_USER}' --password '${PASSWORD}'"
  cortex configure --profile "${1}" --url "${URL}" --account "${CORTEX_ACCOUNT}" --username "${CORTEX_USER}" --password "${PASSWORD}"
}

function cortex-save-default-profile(){
  local AS="${1}"
  cat ~/.cortex/config | jq --arg name "${AS}" '. as $r | ( $r.profiles[($name)] |= $r.profiles.default ) ' | sponge ~/.cortex/config
}

function pip_latest_versions(){
  pip install ${1}== 2>&1 | egrep -o '[0-9]+.[0-9]+.[0-9]+([ab]|dev|rc)([0-9]+)?'
}

# function switch_to_conda_env(){
#   echo $CONDA_DEFAULT_ENV | grep "\b${1}\b" || conda deactivate
#   echo $CONDA_DEFAULT_ENV | grep "\b${1}\b" || conda activate "${1}"
# }

function open_in_tab() {
  open -na "Google Chrome" --args --new-tab "${1}"
}

function open_git_repo_in_tab() {
  (git config --get remote.origin.url | grep github) &&
    open_github_repo_in_tab || open_bitbucket_repo_in_tab
}

function open_github_repo_in_tab() {
  local REPO_URL=$(git config --get remote.origin.url \
      | sed 's#git@github.com:#https://github.com/#g' \
      | sed "s#.git\$#/tree/$(git rev-parse --abbrev-ref HEAD)#g" \
  )
  echo "Opening Github Repo: ${REPO_URL}"
  open_in_tab "${REPO_URL}"
}

function open_bitbucket_repo_in_tab() {
  local REPO_URL=$(git config --get remote.origin.url \
      | sed 's#git@bitbucket.org:#https://bitbucket.org/#g' \
      | sed "s#.git\$#/src/$(git rev-parse --abbrev-ref HEAD)#g" \
  )
  echo "Opening Bitbucket Repo: ${REPO_URL}"
  open_in_tab "${REPO_URL}"
}

function cortex-next-secret() {
  local ACCOUNT="${1}"
  local ACCOUNT_FROM_CONFIG=$(cortex-get-account "${ACCOUNT}")
  local URL_FROM_CONFIG=$(cortex-get-endpoint "${ACCOUNT}")
  local USERNAME_FROM_CONFIG=$(cortex-get-username "${ACCOUNT}")
  local PASSWORD=$(jq -r --arg acc "${ACCOUNT}" '.[($acc)] | @base64' ~/.cortex/passwords.json)
  echo '{}' | jq \
    --arg url "${URL_FROM_CONFIG}" \
    --arg a "${ACCOUNT_FROM_CONFIG}" \
    --arg user "${USERNAME_FROM_CONFIG}" \
    --arg p "${PASSWORD}" \
    '{"url": $url, "account": $a, "username": $user, "password": $p}'
}

function touch_makefile() {
  echo 'SHELL := /bin/bash'
  echo 'MAKEFILE_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))'
}

function reset_cortex_profiles() {
  cortex_cli_command v3/graph/_/db/reset -X PUT
}

function pip-versions(){
  local PACKAGE=${1}
  pip install "${PACKAGE}==" 2>&1 | grep "${PACKAGE}" \
    | grep -E -o '([0-9]+.)?[0-9]+.[0-9]+([-a-zA-Z]+[0-9]+)?' | sort -r
}

function create_python_sdk_virtual_env(){
  # _____________________________________________________ This skips alpha/beta versions. _________
  LATEST_SDK_VER=$(pip-versions cortex-client | grep -E -o '^[0-9]+[.][0-9]+[.][0-9]+$' | head -n 1)
  conda create -f -y -n cortex-sdk-${LATEST_SDK_VER} python=3.7 pip
  # conda 4.5 does not have the stack flag on activate, 4.7 does though ...
  conda activate --stack cortex-sdk-7.1.0
  pip install cortex-client==${LATEST_SDK_VER}
}

function first(){
  if [[ "$#" == "0" ]]; then
    echo "No files satisfied" >&2
    return
  fi

  if [[ -f "${1}" ]]; then
    echo "${1}"
    return
  fi

  if [[ -d "${1}" ]]; then
    echo "${1}"
    return
  fi

  shift
  first $@
}


function new_image() {
  COLOR="${COLOR:-transparent}"
  IMAGE_PATH="${1:-${COLOR}.png}"
  CANVAS_SIZE="${CANVAS_SIZE:-1000}"
  echo "Creating image with name:${IMAGE_PATH}, color:${COLOR}, and size :${CANVAS_SIZE}"
  # https://stackoverflow.com/questions/39504522/create-blank-image-in-imagemagick
  convert -size ${CANVAS_SIZE}x${CANVAS_SIZE} xc:${COLOR} "${IMAGE_PATH}"
  open -a Preview "${IMAGE_PATH}"
}

precmd_functions=(week_prompt)
