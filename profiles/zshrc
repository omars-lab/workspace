# set -x

# Path to your oh-my-zsh installation.
export ZSH=/Users/oeid/.oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="bira"

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion. Case
# sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable auto-setting terminal title.
DISABLE_AUTO_TITLE="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"
HIST_STAMPS="yyyy-mm-dd"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git docker osx python antigen)

# Uncomment the following line to disable bi-weekly auto-update checks.
# DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"


# User configuration

source ~/.oh-my-zsh/plugins/antigen/antigen.zsh
antigen bundle zsh-users/zsh-syntax-highlighting
antigen bundle mafredri/zsh-async
antigen bundle sindresorhus/pure

export PATH="$HOME/bin"
export PATH="/usr/local/MacGPG2/bin:$PATH"
export PATH="/bin:$PATH"
export PATH="/usr/bin:$PATH"
export PATH="/usr/local/bin:$PATH"
export PATH="/sbin:$PATH"
export PATH="/usr/sbin:$PATH"
export PATH="/Users/oeid/Library/Python/3.5/bin:$PATH"

# export MANPATH="/usr/local/man:$MANPATH"

source $ZSH/oh-my-zsh.sh

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# ssh
# export SSH_KEY_PATH="~/.ssh/dsa_id"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Getting all the nix stuff loaded!
. /Users/oeid/.nix-profile/etc/profile.d/nix.sh

# Brew doesnt like this being set
unset SSL_CERT_FILE

source /Users/oeid/git/personal-code/environment/loader.sh

[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] && . $(brew --prefix)/etc/profile.d/autojump.sh

# Loading iterm zsh 
test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

alias cssh='sshuttle -r oeid@jump.cog-dev.insights.ai:2222 -H -N'

# set -o vi

# source /usr/local/opt/autoenv/activate.sh

export NVM_DIR="$HOME/.nvm"
export NPM_TOKEN="eyJ2ZXIiOiIyIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYiLCJraWQiOiJzZDFZZGNPTmJGVVdCVDBQYVU2OFQzZ25pbWo2emxLUExaME5XZDhtSV9vIn0.eyJzdWIiOiJqZi1hcnRpZmFjdG9yeUBlYzVlOWIwYy0wMjRlLTQ2YjktOTIzYy02MTc5ZjFjYjY3OWZcL3VzZXJzXC9jMTJlLWRldiIsInNjcCI6Im1lbWJlci1vZi1ncm91cHM6KiBhcGk6KiIsImF1ZCI6ImpmLWFydGlmYWN0b3J5QGVjNWU5YjBjLTAyNGUtNDZiOS05MjNjLTYxNzlmMWNiNjc5ZiIsImlzcyI6ImpmLWFydGlmYWN0b3J5QGVjNWU5YjBjLTAyNGUtNDZiOS05MjNjLTYxNzlmMWNiNjc5ZiIsImlhdCI6MTUxMTIwNDQ4MCwianRpIjoiMWMwMTgyM2QtMWMyNC00MmRhLWE0ZjgtOTBiYTRkYmZiNTQyIn0.FuLgish1oteeBfR1ek8u86EDbGAsjs_QOXDxGFRo6Z8yCMlaKU8VIAqC7Z9J5V8nZk3ziDxeDTQG5khuFSYcAGroFppjGetacTB67FNyoLwMgB5cYdsqP9aswJPfKhqV6HFjrd0coW8itgmN2sP8ZvyGrBZsDGLawC8lFlV1ZkQ8-1Q_eGQVd4IfdAQ2YyuFfAPdeJ-itgcbyuWqw_cdefBDHXjdXzb0ZbNWNibVxIoCLNAkoxCVLFIdV4z7AehR-OYLKygHyh8dXnsg6VdjSEvFaut3X2IUYMV3MkjYMLhD4USlUlxL-9jPcnztEvzpFKrxsVpzwGSUtz7okdhNLw"
. "/usr/local/opt/nvm/nvm.sh"

# nvm use v4.8.2
nvm use v6.2.0

precmd_functions=(week_prompt)
export precmd_functions


# ln -s /Users/oeid/git/personal-code/environment/profiles/zshrc .zshrc
# ln -s /Users/oeid/git/personal-code/environment/profiles/vimrc .vimrc
# ln -s /Users/oeid/git/personal-code/environment/profiles/bash_profile .bash_profile
# ╰─$ ln -s /Users/oeid/git/personal-code/environment/profiles/config config

### Added by the Bluemix CLI
source /usr/local/Bluemix/bx/zsh_autocomplete

# function cortex_cli_command(){
#   URL_PATH=$1
#   shift;
#   CURRENT_PROFILE=$(cat ~/.cortex/config | jq -r ".currentProfile")
#   JWT_TOKEN=$(cat ~/.cortex/config | jq ".profiles" | jq ".[\"${CURRENT_PROFILE}\"]" | jq -r ".token")
#   CORTEX_API_ENDPOINT=$(cat ~/.cortex/config | jq ".profiles" | jq ".[\"${CURRENT_PROFILE}\"]" | jq -r ".url")
#   curl -s ${CORTEX_API_ENDPOINT}/${URL_PATH} -H "authorization: Bearer ${JWT_TOKEN}" -H 'content-type: application/json' ${@}
# }

# function cortex-set-profile() {
#   cortex configure set-profile ${1}
#   CURRENT_PROFILE=$(cat ~/.cortex/config | jq -r '.currentProfile')
#   CURRENT_PROFILE_CONTENT=$(cat ~/.cortex/config | jq -c ".profiles | .[\"${CURRENT_PROFILE}\"]")
#   cp ~/.cortex/config ~/.cortex/config_bck
#   cat ~/.cortex/config_bck | jq ".profiles.default |= ${CURRENT_PROFILE_CONTENT}" > ~/.cortex/config
# }

function _cortex-set-profile() {
  compadd $(cat ~/.cortex/config | jq -r ".profiles | keys | .[]" | egrep -v '^default$' | xargs echo)
}

function _cortex(){
  compadd $(cortex --help | grep '\[cmd\]' | sed 's/\[cmd\].*//g' | egrep -o "[a-zA-Z]+" | xargs echo)
}

# function cortex-latest-task-status(){
#    JOB_NAME=$1
#    LATEST_TASK_ID=$(cortex tasks list ${JOB_NAME} --json | jq '.tasks' | jq 'sort_by(-.createdAt)' | jq -r '.[0].taskId')
#    # LATEST_TASK_ID=$(cortex tasks list ${JOB_NAME} --json | jq '.tasks' | jq 'map(select(.status != "FAILED")) | sort_by(-.createdAt)' | jq -r '.[0].taskId')
#    echo "LOGS for ${JOB_NAME} ${LATEST_TASK_ID}"
#    cortex jobs status ${JOB_NAME}
#    cortex tasks logs ${JOB_NAME} ${LATEST_TASK_ID}
#    cortex_cli_command v2/jobs/${JOB_NAME}/tasks/${LATEST_TASK_ID}/logs | jq '.'
# }
function _cortex-latest-task-status(){
  compadd $(cortex jobs list --json | jq -r ".[] | .name" | xargs echo)
}

compdef _cortex-set-profile cortex-set-profile
compdef _cortex-latest-task-status cortex-latest-task-status
compdef _cortex cortex
